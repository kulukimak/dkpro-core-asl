#summary Intro using Groovy

=== Installing Java and Eclipse ===

These steps install the basis system requirements needed to implement DKPro Core pipelines using the Java language. They need to be performed only once.

   * Download and install the Java SE Development Kit 7 from the [http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html Oracle Java Site]
   * Download and install the *Eclipse IDE for Java Developers* from the [http://eclipse.org/downloads/ Eclipse website]
      * The Eclipse IDE for Java Developers already contains support for the Java language and the Maven plugin that we require. Of course you can use any other Eclipse distribution that supports Java and manually install the Maven plugin.

=== Running the pipeline ===

For a start, let's try a simple analysis pipeline:

   * Read an English text file called "document.txt"
   * Perform tokenization and sentence boundary detection using OpenNLP
   * Perform lemmatization using !LanguageTool
   * Perform dependency parsing using !MaltParser
   * Write the result to disk in CoNLL 2006 format

Here is how to run that:

   * Open Eclipse
   * Create a new Maven project
   * Open the file *pom.xml*, switch to the tab *Dependencies* 
   * Add the following dependencies

|| *Group Id*                     || *Artifact Id*                               || *Version* ||
|| de.tudarmstadt.ukp.dkpro.core || de.tudarmstadt.ukp.dkpro.core.opennlp-asl || 1.6.1   ||
|| de.tudarmstadt.ukp.dkpro.core || de.tudarmstadt.ukp.dkpro.core.languagetool-asl || 1.6.1   ||
|| de.tudarmstadt.ukp.dkpro.core || de.tudarmstadt.ukp.dkpro.core.maltparser-asl || 1.6.1   ||
|| de.tudarmstadt.ukp.dkpro.core || de.tudarmstadt.ukp.dkpro.core.io.text-asl || 1.6.1   ||
|| de.tudarmstadt.ukp.dkpro.core || de.tudarmstadt.ukp.dkpro.core.io.conll-asl || 1.6.1   ||

   * Create a new class called *Pipeline* in the folder *src/main/java* Pipand copy/paste the code below
   * Create a new text file called *document.txt* in the project root
   * Run the class *Pipeline* in the package *example*
   * Right-click on the project folder and select *Refresh* to see the file created by the pipeline

{{{
package example;

import static org.apache.uima.fit.factory.AnalysisEngineFactory.createEngineDescription;
import static org.apache.uima.fit.factory.CollectionReaderFactory.createReaderDescription;
import static org.apache.uima.fit.pipeline.SimplePipeline.runPipeline;
import de.tudarmstadt.ukp.dkpro.core.io.conll.Conll2006Writer;
import de.tudarmstadt.ukp.dkpro.core.io.text.TextReader;
import de.tudarmstadt.ukp.dkpro.core.languagetool.LanguageToolLemmatizer;
import de.tudarmstadt.ukp.dkpro.core.maltparser.MaltParser;
import de.tudarmstadt.ukp.dkpro.core.opennlp.OpenNlpPosTagger;
import de.tudarmstadt.ukp.dkpro.core.opennlp.OpenNlpSegmenter;

public class Pipeline {

  public static void main(String[] args) throws Exception {
    runPipeline(
        createReaderDescription(TextReader.class,
            TextReader.PARAM_SOURCE_LOCATION, "document.txt",
            TextReader.PARAM_LANGUAGE, "en"),
        createEngineDescription(OpenNlpSegmenter.class),
        createEngineDescription(OpenNlpPosTagger.class),
        createEngineDescription(LanguageToolLemmatizer.class),
        createEngineDescription(MaltParser.class),
        createEngineDescription(Conll2006Writer.class,
            Conll2006Writer.PARAM_TARGET_LOCATION, "."));
  }
}
}}}

The result is written to a file called *document.txt.conll* and could look something like this:

{{{
1	The	the	DT	DT	_	5	det	_	_
2	quick	quick	JJ	JJ	_	5	amod	_	_
3	brown	brown	JJ	JJ	_	5	amod	_	_
4	fox	fox	NN	NN	_	5	nn	_	_
5	jumps	jump	NNS	NNS	_	0	_	_	_
6	over	over	IN	IN	_	5	prep	_	_
7	the	the	DT	DT	_	9	det	_	_
8	lazy	lazy	JJ	JJ	_	9	amod	_	_
9	dog	dog	NN	NN	_	6	pobj	_	_
10	.	.	.	.	_	5	punct	_	_
}}}