#summary Python scripts

<h1>Introduction</h1>

This assumes that you have installed *[http://www.jython.org Jython 2.7beta 1]* and that you have the command `jython` available in your path.

*Note:* Currently *Jython 2.7beta 1 is incompatible with uimaFIT and therefore with DKPro Core*. Jython uses a custom classloader (!SyspathJavaLoader) to load Java classes used be the scripts. However, this classloader currently does not support classpath scanning because the method findResources() has not been implemented. Get our *[https://public.ukp.informatik.tu-darmstadt.de/dkpro_core/jython.jar fixed Jython 2.7b1+ jar]* and replace the _jython.jar_ file in your Jython installation folder with our file. After this, our recipes should work nicely. (See also: [http://bugs.jython.org/issue1896215 Jython issue 1896215])

Additionally, you must have *[https://pypi.python.org/pypi/jip jip 0.8.3]* (or higher) installed. Jip provides our scripts with the ability to automatically download dependencies from Maven repositories. 

Copy one of the scripts into a simple text file (e.g. `pipeline`). Make the file executable (e.g. `chmod +x pipeline`). Then run it (e.g. `./pipeline`). The first time this will take quite long because libraries and models are automatically downloaded.

*Table of contents*

<wiki:toc max_depth="2" />

= Installation =

== Windows 7 ==

=== Basic installation ===

This part assumes that you already have Java installed and adds the basic requirements Jython and jip.

   * Download the *traditional installer* from the [http://www.jython.org/downloads.html Jython downloads page]
   * Double-click on the *jython-installer-2.7-b1.jar* to start the installer
   * Install with all the default settings. This should install Jython to `C:\jython2.7b1`
   * Replace the `jython.jar` with the [https://public.ukp.informatik.tu-darmstadt.de/dkpro_core/jython.jar fixed Jython 2.7b1+ jar]
   * Download [https://pypi.python.org/pypi/jip jip] (version 0.8.3 or higher)
   * Unpack `jip-0.8.3.zip ` to `C:\`
   * Open a command line window
      * Go to the jip folder: `cd C:\jip` 
      * Install jip: `C:\jython2.7b1\jython setup.py install`
      * Close the window
      * Now you can delete the folder `C:\jip` and the file `jip-0.8.3.zip ` again

=== Adding file type associations ===
The following instructions are optional and are *not* required to execute any of the following scripts. These instructions are intended for advanced users, who would like to be able to execute the scripts directly from the command line. If you work for the first time with the command line, you might want to skip this section.

After completing the basic installation (above), the this section covers how to add file type associations. This allows you to run the Jython scripts directly without having to manually invoking the Jython interpreter every time. So instead of invoking a pipeline using

{{{
C:\jython2.7b1\jython pipeline.jpy C:\example_folder\ en
}}}

you could simply use 

{{{
pipeline C:\example_folder\ en
}}}

 
   * Press the *Start button* and search for *environment variable*
   * In the *Environment variable editor* find *PATHEXT* in the *system variable* section and add `;.JPY` to the end
   * Open a command line window
   * Create a file type association for Jython files: `assoc .jpy=Jython`
   * Create a file type for Jython files: `ftype Jython="C:\jython2.7b1\jython" "%1" %*`

= Recipes = 

== OpenNLP Part-of-speech tagging pipeline with direct access to results ==

The following script reads all text files (`*.txt`) in the specified folder and prints part-of-speech tags, one per line.

To execute the script, save it as pipeline.jpy. Then change in the command line to the folder where you saved the script and typ the command `C:\jython2.7b1\jython pipeline.jpy <foldername> <language>`, e.g. `C:\jython2.7b1\jython pipeline.jpy C:\example_folder\ en`. This will read all text files (`*.txt`) located in `C:\example_folder\` and assumes that the language in these files is English. Of course `C:\example_folder\` must exist on your file system and must contain at least one `.txt` file. 


{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.5.0')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.text-asl:1.5.0')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
from de.tudarmstadt.ukp.dkpro.core.io.text import *
from de.tudarmstadt.ukp.dkpro.core.api.segmentation.type import *
from de.tudarmstadt.ukp.dkpro.core.api.syntax.type import *

# uimaFIT imports
from org.apache.uima.fit.util.JCasUtil import *
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.CollectionReaderFactory import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *

# Access to commandline arguments
import sys

# Assemble and run pipeline
pipeline = iteratePipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_PATH, sys.argv[1],
    TextReader.PARAM_LANGUAGE, sys.argv[2],
    TextReader.PARAM_PATTERNS, "*.txt"),
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger));

for jcas in pipeline:
  for token in select(jcas, Token):
    print token.coveredText + " " + token.pos.posValue
}}}

Example output:

{{{
The DT
quick JJ
brown JJ
fox NN
jumps NNS
over IN
the DT
lazy JJ
dog NN
. .
}}}

== OpenNLP Part-of-speech tagging & parsing without reader ==

This pipeline internally creates data, processes it, and writes results to the console.

Mind to provide more memory to Groovy using the command `export JAVA_OPTS="-Xmx1g"` before trying to run this.

{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.5.0')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
from de.tudarmstadt.ukp.dkpro.core.api.segmentation.type import *
from de.tudarmstadt.ukp.dkpro.core.api.syntax.type import *

# uimaFIT imports
from org.apache.uima.fit.util.JCasUtil import *
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.factory import JCasFactory

# Assemble and run pipeline
jcas = JCasFactory.createJCas()
jcas.documentText = "This is a test"
jcas.documentLanguage = "en"

runPipeline(jcas,
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger),
  createEngineDescription(OpenNlpParser,
    OpenNlpParser.PARAM_WRITE_PENN_TREE, True));

for token in select(jcas, Token):
  print token.coveredText + " " + token.pos.posValue

for tree in select(jcas, PennTree):
  print tree.pennTree
}}}

Example output:

{{{
This DT
is VBZ
a DT
test NN
(ROOT (S (NP (DT This)) (VP (VBZ is) (NP (DT a) (NN test)))))
}}}

== !TreeTagger part-of-speech tagging and lemmatizing ==

Reads files from the specified directory and prints the result to the console.

This scripts expects the `tree-tagger` executable and the model file `english-par-linux-3.2-utf8.bin` in the directory in which the script is executed. You can download the !TreeTagger package for your system containing the executable and the model file from the [http://www.cis.uni-muenchen.de/~schmid/tools/TreeTagger/ TreeTagger website]. Make sure to extract the `tree-tagger` executable from the package and - if it is compressed - uncompress the model file. Compressed model files end in `.gz` and can be uncompressed on Linux or OS X using the `gunzip` command or on Windows using e.g. [http://www.7-zip.org 7zip]. If you already have !TreeTagger installed on your system and or if you want to use another model file, you can also set `PARAM_EXECUTABLE_PATH` and `PARAM_MODEL_PATH` to their respective locations.

Call with `pipeline <foldername> <language>`, e.g. `pipeline myFolder en`.

*Note: this recipe uses DKPro Core 1.6.1-SNAPSHOT due to a bug in the !TreeTagger module of DKPro Core 1.5.0 producing an error when explicitly setting `PARAM_MODEL_PATH`.* 

{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Enable snapshot dependencies
from jip.repository import repos_manager
repos_manager.add_repos("ukp-oss-snapshots", "http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots", "remote")

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.6.1-SNAPSHOT')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.treetagger-asl:1.6.1-SNAPSHOT')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.text-asl:1.6.1-SNAPSHOT')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
from de.tudarmstadt.ukp.dkpro.core.treetagger import *
from de.tudarmstadt.ukp.dkpro.core.io.text import *
from de.tudarmstadt.ukp.dkpro.core.api.segmentation.type import *

# uimaFIT imports
from org.apache.uima.fit.util.JCasUtil import *
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.CollectionReaderFactory import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *

# Access to commandline arguments
import sys

# Assemble and run pipeline
pipeline = iteratePipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_PATH, sys.argv[1],
    TextReader.PARAM_LANGUAGE, sys.argv[2],
    TextReader.PARAM_ENCODING, "ISO-8859-1",
    TextReader.PARAM_PATTERNS, "*.txt"),
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(TreeTaggerPosLemmaTT4J,
    TreeTaggerPosLemmaTT4J.PARAM_EXECUTABLE_PATH, "tree-tagger",
    TreeTaggerPosLemmaTT4J.PARAM_MODEL_PATH, "english-par-linux-3.2-utf8.bin",
    TreeTaggerPosLemmaTT4J.PARAM_MODEL_ENCODING, "UTF-8"));

for jcas in pipeline:
  for token in select(jcas, Token):
    print token.coveredText + " " + token.pos.posValue + " " + token.lemma.value
}}}

Example output:

{{{
The DT the
quick JJ quick
brown JJ brown
fox NN fox
jumps NNS jump
over IN over
the DT the
lazy JJ lazy
dog NN dog
. SENT .
}}}

== !MaltParser dependency parsing pipeline with direct access to results ==

Reads the specified file and prints dependencies, one per line. Multiple files can be specified using a wildcard, e.g. '*.txt' (the single quotes are part of the argument to avoid the shell expanding the wildcard!).

Call with `pipeline <foldername> <language>`, e.g. `pipeline myFolder en`.

{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.5.0')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.maltparser-asl:1.5.0')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.text-asl:1.5.0')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.conll-asl:1.5.0')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
from de.tudarmstadt.ukp.dkpro.core.maltparser import *
from de.tudarmstadt.ukp.dkpro.core.io.text import *
from de.tudarmstadt.ukp.dkpro.core.api.syntax.type.dependency import *

# uimaFIT imports
from org.apache.uima.fit.util.JCasUtil import *
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.factory.CollectionReaderFactory import *

# Access to commandline arguments
import sys

# Assemble and run pipeline
pipeline = iteratePipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_SOURCE_LOCATION, sys.argv[1], # 1st commandline parameter
    TextReader.PARAM_LANGUAGE, sys.argv[2]),       # 2nd commandline parameter
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger),
  createEngineDescription(MaltParser))

for jcas in pipeline:
  for dep in select(jcas, Dependency): 
    print "dep: [" + dep.dependencyType +"] \t gov: [" + dep.governor.coveredText + "] \t dep: [" + dep.dependent.coveredText + "]" 
}}}

Example output:

{{{
dep: [det] 	 gov: [jumps] 	 dep: [The]
dep: [amod] 	 gov: [jumps] 	 dep: [quick]
dep: [amod] 	 gov: [jumps] 	 dep: [brown]
dep: [nn] 	 gov: [jumps] 	 dep: [fox]
dep: [prep] 	 gov: [jumps] 	 dep: [over]
dep: [det] 	 gov: [dog] 	 dep: [the]
dep: [amod] 	 gov: [dog] 	 dep: [lazy]
dep: [pobj] 	 gov: [over] 	 dep: [dog]
dep: [punct] 	 gov: [jumps] 	 dep: [.]
}}}


= Trouble shooting = 

== Fixing classpath scanning in Jython ==

Each Jython script require these commands at the beginning of the script to allow uimaFIT access to the dynamically imported dependencies (see below).

{{{
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()
}}}

*Note:* A feature request to set the context classloader automatically when entering a Jython context has been filed upstream ([http://bugs.jython.org/issue2142 Jython issue 2142] ).

== Out of memory ==

If a script complains about not having enough heap, try the command 
{{{
Linux:    export JAVA_MEM="-Xmx1g"
}}} 

and then run the script again.

== expr: syntax error - if jython is a symlink ==

If you set up a symlink to the `jython`command, you may be seeing the error `expr: syntax error` whenever you run a script. This has been discussed [http://sourceforge.net/p/jython/mailman/message/31323567/ here]. The solution is to open the file `jython`in a text editor, locate the line

{{{
if expr "$link" : '/' > /dev/null; then
}}}

and replace it with the line

{{{
if expr "$link" : '[/]' > /dev/null; then
}}}

== Verbose dependency resolving ==

Normally, grape resolves dependencies quietly. If a script has many dependencies, that can mean the script may be running for a long time without any visible output on screen, looking like it is hanging. What it really does is downloading the dependencies. To enable verbose output during the dependency resolving phase, set JAVA_OPTS:

{{{
Linux:    export JYTHON_OPTS="-Dgroovy.grape.report.downloads=true $JAVA_OPTS"
Windows:  set JYTHON_OPTS="-Dgroovy.grape.report.downloads=true %JAVA_OPTS%"
}}}

== Flush caches ==

The scripts download required models and libraries automatically. Sometimes it may be necessary to flush the cache folders. Try deleting `~/.jip/cache`

== Using SNAPSHOT versions ==

To use SNAPSHOT versions of DKPro Core, add the following lines before the `require(...)` lines used to fetch the dependencies.

{{{
# Enable snapshot dependencies
from jip.repository import repos_manager
repos_manager.add_repos("ukp-oss-snapshots", "http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots", "remote")
}}}

Then change the versions of all DKPro Core components to the SNAPSHOT version that you wish to use. It is strongly recommended not to mix versions!

= Known problems =

== Custom UIMA components ==

It is currently not possible to define new UIMA component classes (readers or analysis engines) in Python. The respective classes cannot be found and instantiated by the UIMA framework. The following script will therefore produce an exception:

{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.5.0')
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.text-asl:1.5.0')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
from de.tudarmstadt.ukp.dkpro.core.io.text import *
from de.tudarmstadt.ukp.dkpro.core.api.segmentation.type import *
from de.tudarmstadt.ukp.dkpro.core.api.syntax.type import *

# uimaFIT imports
from org.apache.uima.fit.util.JCasUtil import *
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.CollectionReaderFactory import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.component import *
from org.apache.uima.jcas import JCas

# Access to commandline arguments
import sys

# Custom writer class used at the end of the pipeline to write results to screen
class Writer(JCasAnnotator_ImplBase):
  def process(self, *args):
    if !isinstance(args[0], JCas):
      apply(JCasAnnotator_ImplBase.read, (self,)+args)

    jcas = args[0]
    for token in select(jcas, Token):
      print token.coveredText + " " + token.pos.posValue

# Pipeline
runPipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_PATH, sys.argv[1],
    TextReader.PARAM_LANGUAGE, sys.argv[2],
    TextReader.PARAM_PATTERNS, "*.txt"),
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger),
  createEngineDescription(Writer))
}}}

The produced exception is this:

{{{
org.apache.uima.resource.ResourceInitializationException: org.apache.uima.resource.ResourceInitializationException: Annotator class "org.python.proxies.__main__$Writer$1" was not found. (Descriptor: <unknown>)
}}}

Related issue: [https://issues.apache.org/jira/browse/UIMA-3692 UIMA-3692]

= Comparison to Groovy scripts =

The Python (Jython) scripts are very similar to the Groovy scripts. The main differences (except for the different syntax) are:

=== Dependencies ===

<table>
<tr><th>Jython</th><td>
{{{
from jip.embed import require # only required once
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.5.0')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
}}}
</td></tr>
<tr><th>Groovy</th><td>
{{{
@Grab(group='de.tudarmstadt.ukp.dkpro.core', module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl', version='1.5.0')
import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
}}}
</td></tr>
</table>

=== Custom UIMA components ===

It is currently not possible to define custom UIMA components in Jython scripts. In Groovy scripts, this is possible.