#summary Groovy scripts

<h1>Introduction</h1>

This assumes that you have installed [http://groovy.codehaus.org Groovy] and that you have the command `groovy` available in your path. On Debian/Ubuntu systems, installing Groovy should be as easy as `apt-get install groovy`.

Copy on of the scripts into a simple text file (e.g. `pipeline`). Make the file executable (e.g. `chmod +x pipeline). Then run it (e.g. `./pipeline`). The first time this will take quite long because libraries and models are automatically downloaded.

The scripts download required models and libraries automatically. Sometimes it may be necessary to flush the cache folders. Try deleting `~/.groovy/grapes` and `~/.ivy2/cache`.

If a script complains about not having enough heap, try the command `export JAVA_OPTS="-Xmx1g"` and then run the script again.

*Table of contents*

<wiki:toc max_depth="2" />

== OpenNLP Part-of-speech tagging pipeline writing to IMS Open Corpus Workbench format ==

Reads all text files (`*.txt`) in the specified folder and writes to the specified file.

Call with `pipeline <foldername> <language> <outputfile>`, e.g. `pipeline myFolder en output.tsv`.

{{{
#!/usr/bin/env groovy
@GrabResolver(name='ukp-oss-snapshots', 
      root='http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl', 
      version='1.5.0-SNAPSHOT')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.io.text-asl', 
      version='1.5.0-SNAPSHOT')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.io.imscwb-asl', 
      version='1.5.0-SNAPSHOT')

import org.uimafit.pipeline.*;
import static org.uimafit.util.JCasUtil.*;
import static org.uimafit.factory.CollectionReaderFactory.*;
import static org.uimafit.factory.AnalysisEngineFactory.*;

import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
import de.tudarmstadt.ukp.dkpro.core.io.text.*;
import de.tudarmstadt.ukp.dkpro.core.io.imscwb.*;

// Assemble and run pipeline
SimplePipeline.runPipeline(  
  createDescription(TextReader,
    TextReader.PARAM_PATH, args[0], // first command line parameter
    TextReader.PARAM_LANGUAGE, args[1], // second command line parameter
    TextReader.PARAM_PATTERNS, ["[+]*.txt"]),
  createPrimitiveDescription(OpenNlpSegmenter),
  createPrimitiveDescription(OpenNlpPosTagger),
  createPrimitiveDescription(ImsCwbWriter,
    ImsCwbWriter.PARAM_TARGET_LOCATION, args[2])); // third command line parameter
}}}

== OpenNLP Part-of-speech tagging pipeline using custom writer component ==

Reads all text files (`*.txt`) in the specified folder and prints part-of-speech tags, one per line.

Call with `pipeline <foldername> <language>`, e.g. `pipeline myFolder en`.

{{{
#!/usr/bin/env groovy
@GrabResolver(name='ukp-oss-snapshots', 
      root='http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl', 
      version='1.5.0-SNAPSHOT')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.io.text-asl', 
      version='1.5.0-SNAPSHOT')

import org.apache.uima.jcas.JCas;

import org.uimafit.factory.JCasFactory;
import org.uimafit.pipeline.*;
import static org.uimafit.util.JCasUtil.*;
import static org.uimafit.factory.CollectionReaderFactory.*;
import static org.uimafit.factory.AnalysisEngineFactory.*;

import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
import de.tudarmstadt.ukp.dkpro.core.io.text.*;
import de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.*;
import de.tudarmstadt.ukp.dkpro.core.api.syntax.type.*;

// Assemble and run pipeline
SimplePipeline.runPipeline(  
  createDescription(TextReader,
    TextReader.PARAM_PATH, args[0], // first command line parameter
    TextReader.PARAM_LANGUAGE, args[1], // second command line parameter
    TextReader.PARAM_PATTERNS, ["[+]*.txt"]),
  createPrimitiveDescription(OpenNlpSegmenter),
  createPrimitiveDescription(OpenNlpPosTagger),
  createPrimitiveDescription(Writer));

// Custom writer class used at the end of the pipeline to write results to screen
class Writer extends org.uimafit.component.JCasAnnotator_ImplBase {
  void process(JCas jcas) {
    for (def t : select(jcas, Token)) {
      println t.coveredText+ " " + t.pos.posValue;
    }
  }
}
}}}

== OpenNLP Part-of-speech tagging pipeline using !JCasIterable and custom analysis result handling ==

Reads all text files (`*.txt`) in the specified folder and prints part-of-speech tags, one per line.

Call with `pipeline <foldername> <language>`, e.g. `pipeline myFolder en`.

{{{
#!/usr/bin/env groovy
@GrabResolver(name='ukp-oss-snapshots', 
      root='http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl', 
      version='1.5.0-SNAPSHOT')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.io.text-asl', 
      version='1.5.0-SNAPSHOT')

import org.uimafit.factory.JCasFactory;
import org.uimafit.pipeline.*;
import static org.uimafit.util.JCasUtil.*;
import static org.uimafit.factory.CollectionReaderFactory.*;
import static org.uimafit.factory.AnalysisEngineFactory.*;

import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
import de.tudarmstadt.ukp.dkpro.core.io.text.*;
import de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.*;
import de.tudarmstadt.ukp.dkpro.core.api.syntax.type.*;

def pipeline = new JCasIterable(
  createCollectionReader(TextReader,
    TextReader.PARAM_PATH, args[0],
    TextReader.PARAM_LANGUAGE, args[1],
    TextReader.PARAM_PATTERNS, ["[+]*.txt"]),
  createPrimitive(OpenNlpSegmenter),
  createPrimitive(OpenNlpPosTagger));

for (def jcas : pipeline) {
  for (def t : select(jcas, Token)) {
    println t.coveredText+ " " + t.pos.posValue;
  }
}
}}}

== OpenNLP Part-of-speech tagging & parsing without reader ==

This pipeline internally creates data, processes it, and writes results to the console.

Mind to provide more memory to Groovy using the command `export JAVA_OPTS="-Xmx1g"` before trying to run this.

{{{
#!/usr/bin/env groovy
@GrabResolver(name='ukp-oss-snapshots', 
      root='http://zoidberg.ukp.informatik.tu-darmstadt.de/artifactory/public-snapshots')
@Grab(group='de.tudarmstadt.ukp.dkpro.core', 
      module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl', 
      version='1.5.0-SNAPSHOT')

import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
import org.uimafit.factory.JCasFactory;
import org.uimafit.pipeline.SimplePipeline;
import de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.*;
import de.tudarmstadt.ukp.dkpro.core.api.syntax.type.*;
import static org.uimafit.util.JCasUtil.*;
import static org.uimafit.factory.AnalysisEngineFactory.*;

def jcas = JCasFactory.createJCas();
jcas.documentText = "This is a test";
jcas.documentLanguage = "en";

SimplePipeline.runPipeline(jcas,
  createPrimitiveDescription(OpenNlpSegmenter),
  createPrimitiveDescription(OpenNlpPosTagger),
  createPrimitiveDescription(OpenNlpParser,
    OpenNlpParser.PARAM_WRITE_PENN_TREE, true));

for (def t : select(jcas, Token)) {
    println t.coveredText+ " " + t.pos.posValue;
}

for (def t : select(jcas, PennTree)) {
    println t.pennTree;
}
}}}