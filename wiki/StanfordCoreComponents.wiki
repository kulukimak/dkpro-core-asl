#summary This page describes processing a small paragraph with Stanford CoreNLP components: StanfordSegmenter, StanfordNamedEntityRecognizer, StanfordParser.
#labels InProgress

<wiki:toc max_depth="3" />

= Introduction =

This page describes processing a small paragraph with Stanford CoreNLP components (*!StanfordSegmenter*, *!StanfordNamedEntityRecognizer*, *!StanfordParser*) and writing out the *noun phrases* (NP) and *Named Entities* (NE) ocurring in the NPs into a file (CSV format), such as e.g.
  * NP   the new product of UKP Lab   NE UKP Lab
  * NP   the latest announcements in the news   NE -

All these components are UIMA annotators for the *Stanford CoreNLP* software ([http://www-nlp.stanford.edu/software/corenlp.shtml website]).

= Pre-requisites =

Either, create a new Maven project or incorporate the following to your existing Maven project. It is expected that you read the [http://code.google.com/p/dkpro-core-asl/wiki/MyFirstDKProProject basic tutorial]. You'll need the following dependencies.

Dependency Management:

  * de.tudarmstadt.ukp.dkpro.core-asl

Dependencies:

  * de.tudarmstadt.ukp.dkpro.core.stanfordnlp-gpl
  * de.tudarmstadt.ukp.dkpro.core.stanfordnlp-model-ner-en-all.3class.distsim.crf (for example)
  * de.tudarmstadt.ukp.dkpro.core.stanfordnlp-model-parser-en-pcfg (for example)

= !StanfordSegmenter = 

The Stanford Segmenter performs tokenizations and makes sentence and token annotations and can serve as a high quality alternative for other segmenter components like the _!BreakIteratorSegmenter_.

== Pipeline ==

Include the component into your pipeline this way:

   {{{
  AnalysisEngineDescription ner = createPrimitiveDescription(
    StanfordSegmenter.class
  );
   }}}

== Output == 

An example annotations output may look like this:

   {{{
INFO: === CAS ===
-- Document Text --
The UN resides in New York City.
-- Annotations --
[DocumentAnnotation] (0, 32) The UN resides in New York City.
[Sentence] (0, 32) The UN resides in New York City.
[Token] (0, 3) The
[Token] (4, 6) UN
[Token] (7, 14) resides
[Token] (15, 17) in
[Token] (18, 21) New
[Token] (22, 26) York
[Token] (27, 31) City
[Token] (31, 32) .
   }}}

= !StanfordNamedEntityRecognizer = 

The Stanford NER ([http://nlp.stanford.edu/software/CRF-NER.shtml website]) is a CRFClassifier implementation of a Named Entity Recognizer to label sequences of words in a text which are the names of things, such as person and company names, or gene and protein names.

== Models and types ==

Included with the Stanford NER are a 4 class model trained for CoNLL, a 7 class model trained for MUC, and a 3 class model trained on both data sets for the intersection of those class sets.

  * 3 class	Location, Person, Organization
  * 4 class	Location, Person, Organization, Misc
  * 7 class	Time, Location, Organization, Person, Money, Percent, Date

The corresponding UIMA annotation types are called "Person", "Organization", "Location" etc., from the package *de.tudarmstadt.ukp.dkpro.core.type.ner*.

== Pipeline ==

Include the component into your pipeline this way:

   {{{
  AnalysisEngineDescription ner = createPrimitiveDescription(
    StanfordNamedEntityRecognizer.class,
    StanfordNamedEntityRecognizer.PARAM_LANGUAGE, "en", /* if not set on the Reader */
    StanfordNamedEntityRecognizer.PARAM_VARIANT, "all.3class.distsim.crf");
   }}}

== Output ==

An example annotations output may look like this:

   {{{
INFO: === CAS ===
-- Document Text --
The headquarters of the UN is a complex in New York City.
-- Annotations --
[DocumentAnnotation] (0, 57) The headquarters of the UN is a complex in New York City.
[Organization] (24, 26) UN
[Location] (43, 56) New York City
   }}}

= !StanfordParser = 

The Stanford Parser ([http://www-nlp.stanford.edu/software/lex-parser.shtml website]) is a program that works out the grammatical structure of sentences. There are models available for many languages, e.g. Englisch, German, Chinese or Arabic.

== Models ==

There are different models for various languages, parsers include a PCFG (probabilistic context-free grammar) parser and a factored parser.

== Pipeline ==

Include the component into your pipeline this way:

   {{{
 AnalysisEngineDescription parser = createPrimitiveDescription(
  StanfordParser.class,
  StanfordParser.PARAM_LANGUAGE, "en", /* if not set on the Reader */
  StanfordParser.PARAM_MODEL_VARIANT, "pcfg");
   }}}


== Output ==

An example annotations output may look like this:

   {{{
INFO: === CAS ===
-- Document Text --
The UN resides in New York City.
-- Annotations --
[DocumentAnnotation] (0, 32) The UN resides in New York City.
[ROOT] (0, 32) The UN resides in New York City.
[DET] (0, 32) The UN resides in New York City.
[POBJ] (0, 32) The UN resides in New York City.
[S] (0, 32) The UN resides in New York City.
[NSUBJ] (0, 32) The UN resides in New York City.
[PREP] (0, 32) The UN resides in New York City.
[Sentence] (0, 32) The UN resides in New York City.
[NN] (0, 32) The UN resides in New York City.
[NN] (0, 32) The UN resides in New York City.
[NP] (0, 6) The UN
[ART] (0, 3) The
[NP] (4, 6) UN
[VP] (7, 31) resides in New York City
[V] (7, 14) resides
[PP] (15, 31) in New York City
[PP] (15, 17) in
[NP] (18, 31) New York City
[NP] (18, 21) New
[NP] (22, 26) York
[NP] (27, 31) City
[PUNC] (31, 32) .
   }}}

= Create your experiment =

The whole pipeline may look like this: