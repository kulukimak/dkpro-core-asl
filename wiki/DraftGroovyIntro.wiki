#summary Intro using Groovy

=== Installing Java and Groovy ===

These steps install the basis system requirements needed to implement DKPro Core pipelines using the [http://groovy.codehaus.org Groovy] language. They need to be performed only once.

   * Download and install the Java SE Development Kit 7 from the [http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html Oracle Java Site]
   * Windows: download and run the Windows Installer from the [http://groovy.codehaus.org/Download?nc Groovy homepage]
   * Linux/OS X: Open a terminal which we will use to install Groovy using [http://gvmtool.net gvm]
      * `curl -s get.gvmtool.net | bash`
      * Open a new terminal window to activate gvm and in the new window enter
      * `gvm install groovy`

=== Running the pipeline ===

For a start, let's try a simple analysis pipeline:

   * Read an English text file called "document.txt"
   * Perform tokenization and sentence boundary detection using OpenNLP
   * Perform lemmatization using !LanguageTool
   * Perform dependency parsing using !MaltParser
   * Write the result to disk in CoNLL 2006 format

Here is how to run that:

   * Open a text editor and copy/paste the following script into it.
   * Save the file under the name *pipeline.groovy*.
   * Create another text file in the editor, write some English text into it, and save under the name *document.txt*.
   * Open a command line in the directory to which you saved the two files
   * Invoke the script using the command `groovy pipeline.groovy`
      * This will take quite a while the first time because the software components and models are downloaded

{{{
#!/usr/bin/env groovy
@Grab(group='de.tudarmstadt.ukp.dkpro.core', version='1.6.1',
      module='de.tudarmstadt.ukp.dkpro.core.opennlp-asl')
import de.tudarmstadt.ukp.dkpro.core.opennlp.*;
@Grab(group='de.tudarmstadt.ukp.dkpro.core', version='1.6.1',
      module='de.tudarmstadt.ukp.dkpro.core.languagetool-asl')
import de.tudarmstadt.ukp.dkpro.core.languagetool.*;
@Grab(group='de.tudarmstadt.ukp.dkpro.core', version='1.6.1',
      module='de.tudarmstadt.ukp.dkpro.core.maltparser-asl')
import de.tudarmstadt.ukp.dkpro.core.maltparser.*;
@Grab(group='de.tudarmstadt.ukp.dkpro.core', version='1.6.1',
      module='de.tudarmstadt.ukp.dkpro.core.io.text-asl')
import de.tudarmstadt.ukp.dkpro.core.io.text.*;
@Grab(group='de.tudarmstadt.ukp.dkpro.core', version='1.6.1',
      module='de.tudarmstadt.ukp.dkpro.core.io.conll-asl')
import de.tudarmstadt.ukp.dkpro.core.io.conll.*;

import static org.apache.uima.fit.pipeline.SimplePipeline.*;
import static org.apache.uima.fit.factory.AnalysisEngineFactory.*;
import static org.apache.uima.fit.factory.CollectionReaderFactory.*;

runPipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_SOURCE_LOCATION, "document.txt",
    TextReader.PARAM_LANGUAGE, "en"),
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger),
  createEngineDescription(LanguageToolLemmatizer),
  createEngineDescription(MaltParser),
  createEngineDescription(Conll2006Writer,
    Conll2006Writer.PARAM_TARGET_LOCATION, "."));
}}}

The result is written to a file called *document.txt.conll* and could look something like this:

{{{
1	The	the	DT	DT	_	5	det	_	_
2	quick	quick	JJ	JJ	_	5	amod	_	_
3	brown	brown	JJ	JJ	_	5	amod	_	_
4	fox	fox	NN	NN	_	5	nn	_	_
5	jumps	jump	NNS	NNS	_	0	_	_	_
6	over	over	IN	IN	_	5	prep	_	_
7	the	the	DT	DT	_	9	det	_	_
8	lazy	lazy	JJ	JJ	_	9	amod	_	_
9	dog	dog	NN	NN	_	6	pobj	_	_
10	.	.	.	.	_	5	punct	_	_
}}}