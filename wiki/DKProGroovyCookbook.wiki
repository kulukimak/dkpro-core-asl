#summary Groovy scripts

<h1>Introduction</h1>

This assumes that you have installed [http://groovy.codehaus.org Groovy] and that you have the command `groovy` available in your path. On Debian/Ubuntu systems, installing Groovy should be as easy as `apt-get install groovy`.

*Note: An [http://stackoverflow.com/questions/23504261/dkpro-groovy-usage-and-installation-with-uima incompatibility] has been reported with Groovy version 2.3.0. Please use a 2.1.x or 2.2.x version or even version 2.3.1 or higher. (See also: [http://jira.codehaus.org/browse/GROOVY-6768 GROOVY-6768])*

Copy one of the scripts into a simple text file (e.g. `pipeline`). Make the file executable (e.g. `chmod +x pipeline`). Then run it (e.g. `./pipeline`). The first time this will take quite long because libraries and models are automatically downloaded.

If you encounter problems, please refer to our [DKProGroovyTroubleShooting Groovy trouble-shooting guide].

= Recipes = 

  * [GroovyPortedNltkIntroExamples NLTK intro examples ported to DKPro Core]

*Building pipelines:* four different approaches to running a simple part-of-speech pipeline

  * [GroovyOpenNlpPosTagWriteCwb OpenNLP Part-of-speech tagging pipeline writing to IMS Open Corpus Workbench format]
  * [GroovyOpenNlpPosTagWriteCustom OpenNLP Part-of-speech tagging pipeline using custom writer component]
  * [GroovyOpenNlpPosTagAccessDirect OpenNLP Part-of-speech tagging pipeline with direct access to results]
  * [GroovyOpenNlpPosTagNoReader OpenNLP Part-of-speech tagging & parsing without reader]

*Dependency parsing*

  * [GroovyMaltParserAccessDirect MaltParser dependency parsing pipeline with direct access to results]
  * [GroovyMaltParserWriteConll2006 MaltParser dependency parsing pipeline writing to CONLL format]

*Mixing components*

  * [GroovyFullyMixed Fully mixed pipeline]

*Conversion between corpus formats*

  * [GroovyConvertConll2006To2009 Convert a corpus at CONLL 2006 format to CONLL 2009]

*Normalization*

  * [GroovyUmlautNormalization Normalizing a text with UmlautNormalizer]

*Evaluation*

  * [GroovySegmenterEvaluator Script to evaluate segmenters]

*Other*

  * [GroovyDecompounding Decompounding without a ranker resource]
  * [GroovyTreeTaggerPosTagNoReaderAccessDirect TreeTagger using manually downloaded executable and model]
