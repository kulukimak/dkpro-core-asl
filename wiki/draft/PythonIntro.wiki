#summary Intro using Python

=== Installing Java, Jython, and jip ===

These steps install the basis system requirements needed to implement DKPro Core pipelines  using the Python language. They need to be performed only once.

   * Download and install the Java SE Development Kit 7 from the [http://www.oracle.com/technetwork/java/javase/downloads/jdk7-downloads-1880260.html Oracle Java Site]
   * Download the *Jython 2.7beta 1* traditional installer from [http://search.maven.org/remotecontent?filepath=org/python/jython-installer/2.7-b1/jython-installer-2.7-b1.jar here]
   * Double-click on the *jython-installer-2.7-b1.jar* to start the installer
   * Install with all the default settings. This should install Jython to `C:\jython2.7b1`
   * Replace the `jython.jar` with the [https://public.ukp.informatik.tu-darmstadt.de/dkpro_core/jython.jar fixed Jython 2.7b1+ jar]
   * Download [https://pypi.python.org/pypi/jip jip] (version 0.8.3 or higher)
   * Unpack `jip-0.8.3.zip ` to `C:\`
   * Open a command line window
      * Go to the jip folder: `cd C:\jip` 
      * Install jip: `C:\jython2.7b1\jython setup.py install`
      * Close the window
      * Now you can delete the folder `C:\jip` and the file `jip-0.8.3.zip ` again

=== Running the pipeline ===

For a start, let's try a simple analysis pipeline:

   * Read an English text file called "document.txt"
   * Perform tokenization and sentence boundary detection using OpenNLP
   * Perform lemmatization using !LanguageTool
   * Perform dependency parsing using !MaltParser
   * Write the result to disk in CoNLL 2006 format

Here is how to run that:

   * Open a text editor and copy/paste the following script into it.
   * Save the file under the name *pipeline.groovy*.
   * Create another text file in the editor, write some English text into it, and save under the name *document.txt*.
   * Open a command line in the directory to which you saved the two files
   * Invoke the script using the command `groovy pipeline.groovy`
      * This will take quite a while the first time because the software components and models are downloaded

{{{
#!/usr/bin/env jython
# Fix classpath scanning - otherise uimaFIT will not find the UIMA types
from java.lang import Thread
from org.python.core.imp import *
Thread.currentThread().contextClassLoader = getSyspathJavaLoader()

# Dependencies and imports for DKPro modules
from jip.embed import require
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.opennlp-asl:1.6.1')
from de.tudarmstadt.ukp.dkpro.core.opennlp import *
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.languagetool-asl:1.6.1')
from de.tudarmstadt.ukp.dkpro.core.languagetool import *
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.maltparser-asl:1.6.1')
from de.tudarmstadt.ukp.dkpro.core.maltparser import *
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.text-asl:1.6.1')
from de.tudarmstadt.ukp.dkpro.core.io.text import *
require('de.tudarmstadt.ukp.dkpro.core:de.tudarmstadt.ukp.dkpro.core.io.conll-asl:1.6.1')
from de.tudarmstadt.ukp.dkpro.core.io.conll import *

# uimaFIT imports
from org.apache.uima.fit.pipeline.SimplePipeline import *
from org.apache.uima.fit.factory.AnalysisEngineFactory import *
from org.apache.uima.fit.factory.CollectionReaderFactory import *

runPipeline(
  createReaderDescription(TextReader,
    TextReader.PARAM_SOURCE_LOCATION, "document.txt",
    TextReader.PARAM_LANGUAGE, "en"),
  createEngineDescription(OpenNlpSegmenter),
  createEngineDescription(OpenNlpPosTagger),
  createEngineDescription(LanguageToolLemmatizer),
  createEngineDescription(MaltParser),
  createEngineDescription(Conll2006Writer,
    Conll2006Writer.PARAM_TARGET_LOCATION, "."));
}}}

The result is written to a file called *document.txt.conll* and could look something like this:

{{{
1	The	the	DT	DT	_	5	det	_	_
2	quick	quick	JJ	JJ	_	5	amod	_	_
3	brown	brown	JJ	JJ	_	5	amod	_	_
4	fox	fox	NN	NN	_	5	nn	_	_
5	jumps	jump	NNS	NNS	_	0	_	_	_
6	over	over	IN	IN	_	5	prep	_	_
7	the	the	DT	DT	_	9	det	_	_
8	lazy	lazy	JJ	JJ	_	9	amod	_	_
9	dog	dog	NN	NN	_	6	pobj	_	_
10	.	.	.	.	_	5	punct	_	_
}}}